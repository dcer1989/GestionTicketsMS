@startuml CinemaMicroservicesArchitecture

package "Client" {
    [Frontend]
}

package "Microservices" {
    [Shows Service] as ShowsService
    [Seat Booking Service] as SeatBookingService
    [Ticket Purchase Service] as TicketPurchaseService
    [Payment Service] as PaymentService
    [Notification Service] as NotificationService
    [Promotion Service] as PromotionService
}

package "Databases" {
    [Shows DB] as ShowsDB
    [Seats DB] as SeatsDB
    [Tickets DB] as TicketsDB
    [Payments DB] as PaymentsDB
    [Notifications DB] as NotificationsDB
    [Promotions DB] as PromotionsDB
}

package "Infrastructure" {
    [Message Queue] as MessageQueue
}

' Relaciones entre los microservicios y sus bases de datos
ShowsService --> ShowsDB : Manage Shows
SeatBookingService --> SeatsDB : Manage Seats
TicketPurchaseService --> TicketsDB : Manage Tickets
PaymentService --> PaymentsDB : Manage Payments
NotificationService --> NotificationsDB : Log Notifications
PromotionService --> PromotionsDB : Manage Promotions

' Comunicaciones síncronas (en azul)
Frontend -[#blue]-> ShowsService : View Showtimes
Frontend -[#blue]-> SeatBookingService : Reserve Seats
Frontend -up[#blue]-> TicketPurchaseService : Purchase Tickets
TicketPurchaseService -[#blue]-> SeatBookingService : Validate Seats
TicketPurchaseService -[#blue]-> PromotionService : Validate Promotion

' Comunicaciones asíncronas (en verde)
TicketPurchaseService -[#green]-> MessageQueue : Publish TicketCreated
MessageQueue -[#green]-> PaymentService : Process Payment
PaymentService -[#green]-> MessageQueue : Publish PaymentProcessed
MessageQueue -[#green]-> TicketPurchaseService : Notify Payment Status
TicketPurchaseService -up[#green]-> MessageQueue : Publish TicketPurchased
MessageQueue -[#green]-> SeatBookingService : Notify Ticket Status
SeatBookingService -[#green]-> MessageQueue : Publish Seat Status Updated
MessageQueue -[#green]-> NotificationService : Notify Users

@enduml